// Package Openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package Openapi

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List Events
	// (GET /events)
	ListEvent(c *gin.Context)
	// Create a new Event
	// (POST /events)
	CreateEvent(c *gin.Context)
	// Deletes a Event by ID
	// (DELETE /events/{id})
	DeleteEvent(c *gin.Context, id string)
	// Find a Event by ID
	// (GET /events/{id})
	ReadEvent(c *gin.Context, id string)
	// Updates a Event
	// (PATCH /events/{id})
	UpdateEvent(c *gin.Context, id string)
	// List attached Users
	// (GET /events/{id}/users)
	ListEventUsers(c *gin.Context, id string)
	// Remove user from an event
	// (DELETE /events/{id}/users/{user_id})
	UnsubscribeEvent(c *gin.Context, id string, userId string)
	// Add user to an event
	// (POST /events/{id}/users/{user_id})
	SubscribeEvent(c *gin.Context, id string, userId string)
	// List Users
	// (GET /users)
	ListUser(c *gin.Context)
	// Create a new User
	// (POST /users)
	CreateUser(c *gin.Context)
	// Deletes a User by ID
	// (DELETE /users/{id})
	DeleteUser(c *gin.Context, id string)
	// Find a User by ID
	// (GET /users/{id})
	ReadUser(c *gin.Context, id string)
	// Updates a User
	// (PATCH /users/{id})
	UpdateUser(c *gin.Context, id string)
	// List attached Events
	// (GET /users/{id}/events)
	ListUserEvents(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// ListEvent operation middleware
func (siw *ServerInterfaceWrapper) ListEvent(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ListEvent(c)
}

// CreateEvent operation middleware
func (siw *ServerInterfaceWrapper) CreateEvent(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreateEvent(c)
}

// DeleteEvent operation middleware
func (siw *ServerInterfaceWrapper) DeleteEvent(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteEvent(c, id)
}

// ReadEvent operation middleware
func (siw *ServerInterfaceWrapper) ReadEvent(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ReadEvent(c, id)
}

// UpdateEvent operation middleware
func (siw *ServerInterfaceWrapper) UpdateEvent(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.UpdateEvent(c, id)
}

// ListEventUsers operation middleware
func (siw *ServerInterfaceWrapper) ListEventUsers(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ListEventUsers(c, id)
}

// UnsubscribeEvent operation middleware
func (siw *ServerInterfaceWrapper) UnsubscribeEvent(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter user_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.UnsubscribeEvent(c, id, userId)
}

// SubscribeEvent operation middleware
func (siw *ServerInterfaceWrapper) SubscribeEvent(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter user_id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.SubscribeEvent(c, id, userId)
}

// ListUser operation middleware
func (siw *ServerInterfaceWrapper) ListUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ListUser(c)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.CreateUser(c)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteUser(c, id)
}

// ReadUser operation middleware
func (siw *ServerInterfaceWrapper) ReadUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ReadUser(c, id)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.UpdateUser(c, id)
}

// ListUserEvents operation middleware
func (siw *ServerInterfaceWrapper) ListUserEvents(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ListUserEvents(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/events", wrapper.ListEvent)

	router.POST(options.BaseURL+"/events", wrapper.CreateEvent)

	router.DELETE(options.BaseURL+"/events/:id", wrapper.DeleteEvent)

	router.GET(options.BaseURL+"/events/:id", wrapper.ReadEvent)

	router.PATCH(options.BaseURL+"/events/:id", wrapper.UpdateEvent)

	router.GET(options.BaseURL+"/events/:id/users", wrapper.ListEventUsers)

	router.DELETE(options.BaseURL+"/events/:id/users/:user_id", wrapper.UnsubscribeEvent)

	router.POST(options.BaseURL+"/events/:id/users/:user_id", wrapper.SubscribeEvent)

	router.GET(options.BaseURL+"/users", wrapper.ListUser)

	router.POST(options.BaseURL+"/users", wrapper.CreateUser)

	router.DELETE(options.BaseURL+"/users/:id", wrapper.DeleteUser)

	router.GET(options.BaseURL+"/users/:id", wrapper.ReadUser)

	router.PATCH(options.BaseURL+"/users/:id", wrapper.UpdateUser)

	router.GET(options.BaseURL+"/users/:id/events", wrapper.ListUserEvents)

	return router
}

