{
  "info": {
    "title": "API Tutor 42",
    "description": "API to manage tutor events.",
    "termsOfService": "",
    "contact": {},
    "license": {
      "name": ""
    },
    "version": "0.0.1"
  },
  "paths": {
    "/events": {
      "get": {
        "summary": "List Events",
        "description": "List Events.",
        "tags": [
          "Event"
        ],
        "operationId": "listEvent",
        "responses": {
          "200": {
            "description": "result Event list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "Create a new Event",
        "description": "Creates a new Event and persists it to storage.",
        "tags": [
          "Event"
        ],
        "operationId": "createEvent",
        "requestBody": {
          "description": "Event to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "date_creation",
                  "date_end",
                  "date_start",
                  "date_update",
                  "description",
                  "name",
                  "nb_tutors"
                ],
                "properties": {
                  "date_creation": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "date_end": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "date_start": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "date_update": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "description": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "nb_tutors": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "users": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Event created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/events/{id}": {
      "get": {
        "summary": "Find a Event by ID",
        "description": "Finds the Event with the requested ID and returns it.",
        "tags": [
          "Event"
        ],
        "operationId": "readEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Event",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "summary": "Deletes a Event by ID",
        "description": "Deletes the Event with the requested ID.",
        "tags": [
          "Event"
        ],
        "operationId": "deleteEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Event",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Event with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "summary": "Updates a Event",
        "description": "Updates a Event and persists changes to storage.",
        "tags": [
          "Event"
        ],
        "operationId": "updateEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Event",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Event properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "date_end",
                  "date_start",
                  "date_update",
                  "description",
                  "name",
                  "nb_tutors"
                ],
                "properties": {
                  "date_end": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "date_start": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "date_update": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "description": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "nb_tutors": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "users": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Event updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/events/{id}/users": {
      "get": {
        "summary": "List attached Users",
        "description": "List attached Users.",
        "tags": [
          "Event"
        ],
        "operationId": "listEventUsers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Event",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Events list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/events/{id}/users/{user_id}": {
      "post": {
        "summary": "Add user to an event",
        "description": "Subscribe a user to an incoming event.",
        "tags": [
          "Event"
        ],
        "operationId": "subscribeEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the event",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User subscribed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "summary": "Remove user from an event",
        "description": "Unsubscribe a user to an incoming event.",
        "tags": [
          "Event"
        ],
        "operationId": "unsubscribeEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the event",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User unsubscribed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "List Users",
        "description": "List Users.",
        "tags": [
          "User"
        ],
        "operationId": "listUser",
        "responses": {
          "200": {
            "description": "result User list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "summary": "Create a new User",
        "description": "Creates a new User and persists it to storage.",
        "tags": [
          "User"
        ],
        "operationId": "createUser",
        "requestBody": {
          "description": "User to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "first_name",
                  "last_name",
                  "name",
                  "token",
                  "tutor"
                ],
                "properties": {
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "first_name": {
                    "type": "string"
                  },
                  "last_name": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "token": {
                    "type": "string"
                  },
                  "tutor": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "Find a User by ID",
        "description": "Finds the User with the requested ID and returns it.",
        "tags": [
          "User"
        ],
        "operationId": "readUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "summary": "Deletes a User by ID",
        "description": "Deletes the User with the requested ID.",
        "tags": [
          "User"
        ],
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "summary": "Updates a User",
        "description": "Updates a User and persists changes to storage.",
        "tags": [
          "User"
        ],
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "User properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "first_name",
                  "last_name",
                  "name",
                  "token",
                  "tutor"
                ],
                "properties": {
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "first_name": {
                    "type": "string"
                  },
                  "last_name": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "token": {
                    "type": "string"
                  },
                  "tutor": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/events": {
      "get": {
        "summary": "List attached Events",
        "description": "List attached Events.",
        "tags": [
          "User"
        ],
        "operationId": "listUserEvents",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Event": {
        "type": "object",
        "required": [
          "date_creation",
          "date_end",
          "date_start",
          "date_update",
          "description",
          "id",
          "name",
          "nb_tutors"
        ],
        "properties": {
          "date_creation": {
            "type": "string",
            "format": "date-time"
          },
          "date_end": {
            "type": "string",
            "format": "date-time"
          },
          "date_start": {
            "type": "string",
            "format": "date-time"
          },
          "date_update": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nb_tutors": {
            "type": "integer",
            "format": "int32"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "User": {
        "type": "object",
        "required": [
          "first_name",
          "id",
          "last_name",
          "name",
          "token",
          "tutor"
        ],
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "first_name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "tutor": {
            "type": "boolean"
          }
        }
      }
    },
    "responses": {
      "400": {
        "description": "invalid input, data invalid",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "example": 400
                },
                "errors": {
                  "type": "object",
                  "properties": {}
                },
                "status": {
                  "type": "string",
                  "example": "Bad Request"
                }
              }
            }
          }
        }
      },
      "403": {
        "description": "insufficient permissions",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "example": 403
                },
                "errors": {
                  "type": "object",
                  "properties": {}
                },
                "status": {
                  "type": "string",
                  "example": "Forbidden"
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "resource not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "example": 404
                },
                "errors": {
                  "type": "object",
                  "properties": {}
                },
                "status": {
                  "type": "string",
                  "example": "Not Found"
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "conflicting resources",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "example": 409
                },
                "errors": {
                  "type": "object",
                  "properties": {}
                },
                "status": {
                  "type": "string",
                  "example": "Conflict"
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "unexpected error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32",
                  "example": 500
                },
                "errors": {
                  "type": "object",
                  "properties": {}
                },
                "status": {
                  "type": "string",
                  "example": "Internal Server Error"
                }
              }
            }
          }
        }
      }
    },
    "parameters": {}
  },
  "openapi": "3.0.3"
}
