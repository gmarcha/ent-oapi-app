// Code generated by entc, DO NOT EDIT.

package event

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the event type in the database.
	Label = "event"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldDateCreation holds the string denoting the date_creation field in the database.
	FieldDateCreation = "date_creation"
	// FieldDateUpdate holds the string denoting the date_update field in the database.
	FieldDateUpdate = "date_update"
	// FieldDateStart holds the string denoting the date_start field in the database.
	FieldDateStart = "date_start"
	// FieldDateEnd holds the string denoting the date_end field in the database.
	FieldDateEnd = "date_end"
	// FieldNbTutors holds the string denoting the nb_tutors field in the database.
	FieldNbTutors = "nb_tutors"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// Table holds the table name of the event in the database.
	Table = "events"
	// UsersTable is the table that holds the users relation/edge. The primary key declared below.
	UsersTable = "event_users"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
)

// Columns holds all SQL columns for event fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldDateCreation,
	FieldDateUpdate,
	FieldDateStart,
	FieldDateEnd,
	FieldNbTutors,
}

var (
	// UsersPrimaryKey and UsersColumn2 are the table columns denoting the
	// primary key for the users relation (M2M).
	UsersPrimaryKey = []string{"event_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDescription holds the default value on creation for the "description" field.
	DefaultDescription string
	// DefaultDateCreation holds the default value on creation for the "date_creation" field.
	DefaultDateCreation func() time.Time
	// DefaultDateUpdate holds the default value on creation for the "date_update" field.
	DefaultDateUpdate func() time.Time
	// UpdateDefaultDateUpdate holds the default value on update for the "date_update" field.
	UpdateDefaultDateUpdate func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
