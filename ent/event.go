// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/gmarcha/goswagger-ent-app/ent/event"
	"github.com/google/uuid"
)

// Event is the model entity for the Event schema.
type Event struct {
	config `binding:"-" json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty" binding:"required,lowercase"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// DateCreation holds the value of the "date_creation" field.
	DateCreation time.Time `json:"date_creation,omitempty"`
	// DateUpdate holds the value of the "date_update" field.
	DateUpdate time.Time `json:"date_update,omitempty"`
	// DateStart holds the value of the "date_start" field.
	DateStart time.Time `json:"date_start,omitempty" binding:"required,validateDateStart"`
	// DateEnd holds the value of the "date_end" field.
	DateEnd time.Time `json:"date_end,omitempty" binding:"required,gtfield=DateStart"`
	// NbTutors holds the value of the "nb_tutors" field.
	NbTutors int `json:"nb_tutors,omitempty" binding:"required,gt=0"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventQuery when eager-loading is set.
	Edges EventEdges `json:"edges"`
}

// EventEdges holds the relations/edges for other nodes in the graph.
type EventEdges struct {
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e EventEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Event) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case event.FieldNbTutors:
			values[i] = new(sql.NullInt64)
		case event.FieldName, event.FieldDescription:
			values[i] = new(sql.NullString)
		case event.FieldDateCreation, event.FieldDateUpdate, event.FieldDateStart, event.FieldDateEnd:
			values[i] = new(sql.NullTime)
		case event.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Event", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Event fields.
func (e *Event) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case event.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				e.ID = *value
			}
		case event.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				e.Name = value.String
			}
		case event.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				e.Description = value.String
			}
		case event.FieldDateCreation:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_creation", values[i])
			} else if value.Valid {
				e.DateCreation = value.Time
			}
		case event.FieldDateUpdate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_update", values[i])
			} else if value.Valid {
				e.DateUpdate = value.Time
			}
		case event.FieldDateStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_start", values[i])
			} else if value.Valid {
				e.DateStart = value.Time
			}
		case event.FieldDateEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_end", values[i])
			} else if value.Valid {
				e.DateEnd = value.Time
			}
		case event.FieldNbTutors:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field nb_tutors", values[i])
			} else if value.Valid {
				e.NbTutors = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUsers queries the "users" edge of the Event entity.
func (e *Event) QueryUsers() *UserQuery {
	return (&EventClient{config: e.config}).QueryUsers(e)
}

// Update returns a builder for updating this Event.
// Note that you need to call Event.Unwrap() before calling this method if this Event
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Event) Update() *EventUpdateOne {
	return (&EventClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Event entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Event) Unwrap() *Event {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Event is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Event) String() string {
	var builder strings.Builder
	builder.WriteString("Event(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", name=")
	builder.WriteString(e.Name)
	builder.WriteString(", description=")
	builder.WriteString(e.Description)
	builder.WriteString(", date_creation=")
	builder.WriteString(e.DateCreation.Format(time.ANSIC))
	builder.WriteString(", date_update=")
	builder.WriteString(e.DateUpdate.Format(time.ANSIC))
	builder.WriteString(", date_start=")
	builder.WriteString(e.DateStart.Format(time.ANSIC))
	builder.WriteString(", date_end=")
	builder.WriteString(e.DateEnd.Format(time.ANSIC))
	builder.WriteString(", nb_tutors=")
	builder.WriteString(fmt.Sprintf("%v", e.NbTutors))
	builder.WriteByte(')')
	return builder.String()
}

// Events is a parsable slice of Event.
type Events []*Event

func (e Events) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
